// Example 1: Shallow Copy in Java

class ShallowCopyExample implements Cloneable {
    int[] arr;

    public ShallowCopyExample() {
        arr = new int[10]; // Initialize array with size 10
        for (int i = 0; i < arr.length; i++) {
            arr[i] = i; // Assign values
        }
    }

    protected Object clone() throws CloneNotSupportedException {
        return super.clone(); // Shallow copy
    }

    public static void main(String[] args) {
        try {
            ShallowCopyExample original = new ShallowCopyExample();
            ShallowCopyExample copy = (ShallowCopyExample) original.clone(); // Clone (shallow copy)

            original.arr[0] = -1; // Change in original reflects in copy

            System.out.println("Original array: " + original.arr[0]); // Outputs: -1
            System.out.println("Copied array: " + copy.arr[0]);       // Outputs: -1 (same as original)
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
    }
}

// Example 2: Deep Copy in Java

class DeepCopyExample {
    int[] arr;

    public DeepCopyExample() {
        arr = new int[10]; // Initialize array with size 10
        for (int i = 0; i < arr.length; i++) {
            arr[i] = i; // Assign values
        }
    }

    public DeepCopyExample deepCopy() {
        DeepCopyExample newObject = new DeepCopyExample();
        for (int i = 0; i < this.arr.length; i++) {
            newObject.arr[i] = this.arr[i]; // Copy each value
        }
        return newObject; // Return the new object with copied values
    }

    public static void main(String[] args) {
        DeepCopyExample original = new DeepCopyExample();
        DeepCopyExample copy = original.deepCopy(); // Deep copy

        original.arr[0] = -1; // Change in original does not reflect in copy

        System.out.println("Original array: " + original.arr[0]); // Outputs: -1
        System.out.println("Copied array: " + copy.arr[0]);       // Outputs: 0 (different from original)
    }
}


User
in details describe its purpose , difference and usage
ChatGPT
In Java, the concepts of shallow copy and deep copy are crucial when dealing with object cloning. These concepts define how the properties and nested objects within an object are copied. Understanding the difference between shallow and deep copy is essential for managing memory effectively and preventing unintended modifications to complex data structures.

Shallow Copy
Purpose: The primary purpose of a shallow copy is to create a new object whose fields are exact copies of the original object's fields. However, if the field is an object (non-primitive type), it copies the reference to the object, not the actual object itself. Thus, if the field value is changed in the copied object, it reflects in the original object for non-primitive fields.

Usage: Shallow copy is faster and requires less memory because it does not create copies of the objects the fields refer to. It is suitable for objects with primitive fields or when the objects being copied do not contain complex objects or when shared references to the objects are intended.

Difference from Deep Copy: The main difference is that shallow copy does not create copies of nested objects. It only copies the top-level structure, leaving the deeper structure unchanged and shared among copies.

Deep Copy
Purpose: The deep copy method is used when a full, independent copy of an object is needed, including all objects it references recursively. This means if the original object or the copied object is modified, these changes do not affect each other. Deep copy is essential when the object has complex, mutable objects as fields and complete independence between the copies is required.

Usage: Implementing deep copy can be more complex and resource-intensive than shallow copy, as it requires explicitly copying every object referenced, potentially down to every nested object. It's used when the objects being copied have nested objects that should not be shared between the original and the copy.

Difference from Shallow Copy: The crucial difference is that deep copy creates a completely independent copy of the object and all objects it references, whereas shallow copy does not. This independence prevents changes in the copied object from affecting the original object and vice versa.

Choosing Between Shallow and Deep Copy
The choice between shallow and deep copy depends on the specific requirements of your application:

Shallow Copy: Choose when the object does not contain any mutable objects or when you want changes to be reflected across copies. It's simpler and more performant but with the caveat of shared references.

Deep Copy: Choose when the copied object must be completely independent of the original object, especially when dealing with complex, mutable data structures. It ensures that changes in the copied object do not affect the original object, but it requires more effort to implement and consumes more memory and processing power.

Understanding and choosing the right type of copy operation is fundamental for correct and efficient application behavior, especially in applications dealing with complex data structures that are modified over time.